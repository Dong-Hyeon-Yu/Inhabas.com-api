buildscript {
	ext {
		dependencyManagementVersion = '1.0.11.RELEASE'
		springBootVersion = '2.6.1'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

subprojects {
	apply plugin: 'java-library'
	apply plugin: 'io.spring.dependency-management'

	configurations {
		developmentOnly
		runtimeClasspath {
			extendsFrom developmentOnly
		}
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
		}
		dependencies {

		}
	}

	repositories {
		maven { url "https://repo.spring.io/libs-release" }
		maven { url "https://repo.spring.io/milestone" }
		mavenCentral()
	}

	dependencies {
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		implementation 'org.slf4j:slf4j-api'
		implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'

		runtimeOnly(
				'org.mariadb.jdbc:mariadb-java-client',
				'com.h2database:h2'
		)

		testImplementation('org.springframework.boot:spring-boot-starter-test') {
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
	}

	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
	compileJava.options.encoding = 'UTF-8'

	test {
		useJUnitPlatform()
	}
}

project(':common') {
	dependencies {
		implementation 'org.springframework:spring-context'
		implementation 'org.springframework:spring-context-support'
	}
}

project(':menu-service') {
	apply plugin: 'org.springframework.boot'

	dependencies {
		api project(':common')

		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-autoconfigure'

		// querydsl
		implementation 'com.querydsl:querydsl-jpa'
		annotationProcessor(
				'jakarta.persistence:jakarta.persistence-api',
				'jakarta.annotation:jakarta.annotation-api',
				"com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
		)
	}

	// querydsl
	clean {
		delete file('src/main/generated')
	}
	task cleanGeneratedDir(type: Delete) {
		delete file('src/main/generated')
	}
}

project(':security') {
	dependencies {

		// configurationProperties
		annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'


		// security
		api 'org.springframework.boot:spring-boot-starter-security'
		api 'org.springframework.boot:spring-boot-starter-oauth2-client'
		api 'javax.xml.bind:jaxb-api'
		api 'org.springframework.security:spring-security-test'

		implementation 'org.springframework.boot:spring-boot-starter-web'

		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

		// jwt
		api 'io.jsonwebtoken:jjwt-api:0.11.2'
		runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2',
				// Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
				//'org.bouncycastle:bcprov-jdk15on:1.60',
				'io.jsonwebtoken:jjwt-jackson:0.11.2' // or 'io.jsonwebtoken:jjwt-gson:0.11.2' for gson
	}

	bootJar.enabled(false)
	jar.enabled(true)
}

project(':members-service') {
	apply plugin: 'org.springframework.boot'

	dependencies {
		api project(':common')
		api project(':security')

		api 'org.springdoc:springdoc-openapi-ui:1.6.6'
		api 'org.springframework.boot:spring-boot-starter-web'
		api 'org.springframework.boot:spring-boot-starter-validation'

		api 'org.springframework.boot:spring-boot-starter-data-jpa'
		testImplementation('org.springframework.boot:spring-boot-starter-web')
//		testImplementation('org.springframework.boot:spring-boot-starter-test') {
//			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
//		}

		developmentOnly 'org.springframework.boot:spring-boot-devtools'
	}
}

project(':boards-service') {
	apply plugin: 'org.springframework.boot'

	dependencies {
		api project(':members-service')
		api project(':menu-service')

		// querydsl
		implementation 'com.querydsl:querydsl-jpa'
		annotationProcessor(
				'jakarta.persistence:jakarta.persistence-api',
				'jakarta.annotation:jakarta.annotation-api',
				"com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
		)

//		implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
//		implementation 'org.springframework.boot:spring-boot-starter-web'
//		implementation 'org.springframework.boot:spring-boot-starter-validation'
//
//		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//		testImplementation('org.springframework.boot:spring-boot-starter-web')
//		testImplementation('org.springframework.boot:spring-boot-starter-test') {
//			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
//		}
//
//		developmentOnly 'org.springframework.boot:spring-boot-devtools'
	}
	// querydsl
	clean {
		delete file('src/main/generated')
	}
	task cleanGeneratedDir(type: Delete) {
		delete file('src/main/generated')
	}
}

//dependencies {
//	implementation(
//			// cloud config
//			'org.springframework.cloud:spring-cloud-starter-config:3.1.0',
//			'org.springframework.boot:spring-boot-starter-actuator:2.6.2',
//			'org.springframework.cloud:spring-cloud-starter-bootstrap:3.1.0',
//	)
//}